// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.0
//
// <auto-generated>
//
// Generated from file `dbpool.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <dbpool.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

namespace
{

namespace
{

namespace
{

const ::std::string __net__sinofool__dbpool__idl__DBPoolClient__pushDBInstanceDict_name = "pushDBInstanceDict";

const ::std::string __net__sinofool__dbpool__idl__DBPoolServer__getDBInstanceDict_name = "getDBInstanceDict";

const ::std::string __net__sinofool__dbpool__idl__DBPoolServer__reload_name = "reload";

const ::std::string __net__sinofool__dbpool__idl__DBPoolServer__registerClient_name = "registerClient";

}

}

}

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::net::sinofool::dbpool::idl::upCast(::IceProxy::net::sinofool::dbpool::idl::DBPoolClient* p) { return p; }

void
::IceProxy::net::sinofool::dbpool::idl::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::net::sinofool::dbpool::idl::DBPoolClient>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::net::sinofool::dbpool::idl::DBPoolClient;
        v->__copyFrom(proxy);
    }
}

bool
IceProxy::net::sinofool::dbpool::idl::DBPoolClient::pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__net__sinofool__dbpool__idl__DBPoolClient__pushDBInstanceDict_name);
    ::IceInternal::Outgoing __og(this, __net__sinofool__dbpool__idl__DBPoolClient__pushDBInstanceDict_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_dict);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    bool __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::net::sinofool::dbpool::idl::DBPoolClient::begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__net__sinofool__dbpool__idl__DBPoolClient__pushDBInstanceDict_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __net__sinofool__dbpool__idl__DBPoolClient__pushDBInstanceDict_name, __del, __cookie);
    try
    {
        __result->prepare(__net__sinofool__dbpool__idl__DBPoolClient__pushDBInstanceDict_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_dict);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::net::sinofool::dbpool::idl::DBPoolClient::__begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::net::sinofool::dbpool::idl::DBPoolClientPrx __proxy = ::net::sinofool::dbpool::idl::DBPoolClientPrx::uncheckedCast(__result->getProxy());
            bool __ret;
            try
            {
                __ret = __proxy->end_pushDBInstanceDict(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (bool)> _response;
    };
    return begin_pushDBInstanceDict(__p_dict, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

bool
IceProxy::net::sinofool::dbpool::idl::DBPoolClient::end_pushDBInstanceDict(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __net__sinofool__dbpool__idl__DBPoolClient__pushDBInstanceDict_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::net::sinofool::dbpool::idl::DBPoolClient::ice_staticId()
{
    return ::net::sinofool::dbpool::idl::DBPoolClient::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::net::sinofool::dbpool::idl::DBPoolClient::__newInstance() const
{
    return new DBPoolClient;
}
::IceProxy::Ice::Object* ::IceProxy::net::sinofool::dbpool::idl::upCast(::IceProxy::net::sinofool::dbpool::idl::DBPoolServer* p) { return p; }

void
::IceProxy::net::sinofool::dbpool::idl::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::net::sinofool::dbpool::idl::DBPoolServer>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::net::sinofool::dbpool::idl::DBPoolServer;
        v->__copyFrom(proxy);
    }
}

::net::sinofool::dbpool::idl::DBInstanceDict
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::getDBInstanceDict(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__net__sinofool__dbpool__idl__DBPoolServer__getDBInstanceDict_name);
    ::IceInternal::Outgoing __og(this, __net__sinofool__dbpool__idl__DBPoolServer__getDBInstanceDict_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::net::sinofool::dbpool::idl::DBInstanceDict __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::begin_getDBInstanceDict(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__net__sinofool__dbpool__idl__DBPoolServer__getDBInstanceDict_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __net__sinofool__dbpool__idl__DBPoolServer__getDBInstanceDict_name, __del, __cookie);
    try
    {
        __result->prepare(__net__sinofool__dbpool__idl__DBPoolServer__getDBInstanceDict_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::__begin_getDBInstanceDict(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::net::sinofool::dbpool::idl::DBInstanceDict&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::net::sinofool::dbpool::idl::DBInstanceDict&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::net::sinofool::dbpool::idl::DBPoolServerPrx __proxy = ::net::sinofool::dbpool::idl::DBPoolServerPrx::uncheckedCast(__result->getProxy());
            ::net::sinofool::dbpool::idl::DBInstanceDict __ret;
            try
            {
                __ret = __proxy->end_getDBInstanceDict(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::net::sinofool::dbpool::idl::DBInstanceDict&)> _response;
    };
    return begin_getDBInstanceDict(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::net::sinofool::dbpool::idl::DBInstanceDict
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::end_getDBInstanceDict(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __net__sinofool__dbpool__idl__DBPoolServer__getDBInstanceDict_name);
    ::net::sinofool::dbpool::idl::DBInstanceDict __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

bool
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::reload(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__net__sinofool__dbpool__idl__DBPoolServer__reload_name);
    ::IceInternal::Outgoing __og(this, __net__sinofool__dbpool__idl__DBPoolServer__reload_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    bool __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::begin_reload(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__net__sinofool__dbpool__idl__DBPoolServer__reload_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __net__sinofool__dbpool__idl__DBPoolServer__reload_name, __del, __cookie);
    try
    {
        __result->prepare(__net__sinofool__dbpool__idl__DBPoolServer__reload_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::__begin_reload(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::net::sinofool::dbpool::idl::DBPoolServerPrx __proxy = ::net::sinofool::dbpool::idl::DBPoolServerPrx::uncheckedCast(__result->getProxy());
            bool __ret;
            try
            {
                __ret = __proxy->end_reload(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (bool)> _response;
    };
    return begin_reload(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

bool
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::end_reload(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __net__sinofool__dbpool__idl__DBPoolServer__reload_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

bool
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__net__sinofool__dbpool__idl__DBPoolServer__registerClient_name);
    ::IceInternal::Outgoing __og(this, __net__sinofool__dbpool__idl__DBPoolServer__registerClient_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_client);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    bool __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__net__sinofool__dbpool__idl__DBPoolServer__registerClient_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __net__sinofool__dbpool__idl__DBPoolServer__registerClient_name, __del, __cookie);
    try
    {
        __result->prepare(__net__sinofool__dbpool__idl__DBPoolServer__registerClient_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_client);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::__begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::net::sinofool::dbpool::idl::DBPoolServerPrx __proxy = ::net::sinofool::dbpool::idl::DBPoolServerPrx::uncheckedCast(__result->getProxy());
            bool __ret;
            try
            {
                __ret = __proxy->end_registerClient(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (bool)> _response;
    };
    return begin_registerClient(__p_client, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

bool
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::end_registerClient(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __net__sinofool__dbpool__idl__DBPoolServer__registerClient_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::ice_staticId()
{
    return ::net::sinofool::dbpool::idl::DBPoolServer::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::net::sinofool::dbpool::idl::DBPoolServer::__newInstance() const
{
    return new DBPoolServer;
}

::Ice::Object* net::sinofool::dbpool::idl::upCast(::net::sinofool::dbpool::idl::DBPoolClient* p) { return p; }

namespace
{
const ::std::string __net__sinofool__dbpool__idl__DBPoolClient_ids[2] =
{
    "::Ice::Object",
    "::net::sinofool::dbpool::idl::DBPoolClient"
};

}

bool
net::sinofool::dbpool::idl::DBPoolClient::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__net__sinofool__dbpool__idl__DBPoolClient_ids, __net__sinofool__dbpool__idl__DBPoolClient_ids + 2, _s);
}

::std::vector< ::std::string>
net::sinofool::dbpool::idl::DBPoolClient::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__net__sinofool__dbpool__idl__DBPoolClient_ids[0], &__net__sinofool__dbpool__idl__DBPoolClient_ids[2]);
}

const ::std::string&
net::sinofool::dbpool::idl::DBPoolClient::ice_id(const ::Ice::Current&) const
{
    return __net__sinofool__dbpool__idl__DBPoolClient_ids[1];
}

const ::std::string&
net::sinofool::dbpool::idl::DBPoolClient::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::net::sinofool::dbpool::idl::DBPoolClient";
    return typeId;
#else
    return __net__sinofool__dbpool__idl__DBPoolClient_ids[1];
#endif
}

::Ice::DispatchStatus
net::sinofool::dbpool::idl::DBPoolClient::___pushDBInstanceDict(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::net::sinofool::dbpool::idl::DBInstanceDict __p_dict;
    __is->read(__p_dict);
    __inS.endReadParams();
    bool __ret = pushDBInstanceDict(__p_dict, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __net__sinofool__dbpool__idl__DBPoolClient_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "pushDBInstanceDict"
};

}

::Ice::DispatchStatus
net::sinofool::dbpool::idl::DBPoolClient::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__net__sinofool__dbpool__idl__DBPoolClient_all, __net__sinofool__dbpool__idl__DBPoolClient_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __net__sinofool__dbpool__idl__DBPoolClient_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___pushDBInstanceDict(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
net::sinofool::dbpool::idl::DBPoolClient::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
net::sinofool::dbpool::idl::DBPoolClient::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
net::sinofool::dbpool::idl::__patch(DBPoolClientPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::net::sinofool::dbpool::idl::DBPoolClientPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::net::sinofool::dbpool::idl::DBPoolClient::ice_staticId(), v);
    }
}

::Ice::Object* net::sinofool::dbpool::idl::upCast(::net::sinofool::dbpool::idl::DBPoolServer* p) { return p; }

namespace
{
const ::std::string __net__sinofool__dbpool__idl__DBPoolServer_ids[2] =
{
    "::Ice::Object",
    "::net::sinofool::dbpool::idl::DBPoolServer"
};

}

bool
net::sinofool::dbpool::idl::DBPoolServer::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__net__sinofool__dbpool__idl__DBPoolServer_ids, __net__sinofool__dbpool__idl__DBPoolServer_ids + 2, _s);
}

::std::vector< ::std::string>
net::sinofool::dbpool::idl::DBPoolServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__net__sinofool__dbpool__idl__DBPoolServer_ids[0], &__net__sinofool__dbpool__idl__DBPoolServer_ids[2]);
}

const ::std::string&
net::sinofool::dbpool::idl::DBPoolServer::ice_id(const ::Ice::Current&) const
{
    return __net__sinofool__dbpool__idl__DBPoolServer_ids[1];
}

const ::std::string&
net::sinofool::dbpool::idl::DBPoolServer::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::net::sinofool::dbpool::idl::DBPoolServer";
    return typeId;
#else
    return __net__sinofool__dbpool__idl__DBPoolServer_ids[1];
#endif
}

::Ice::DispatchStatus
net::sinofool::dbpool::idl::DBPoolServer::___getDBInstanceDict(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::net::sinofool::dbpool::idl::DBInstanceDict __ret = getDBInstanceDict(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
net::sinofool::dbpool::idl::DBPoolServer::___reload(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    bool __ret = reload(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
net::sinofool::dbpool::idl::DBPoolServer::___registerClient(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::net::sinofool::dbpool::idl::DBPoolClientPrx __p_client;
    __is->read(__p_client);
    __inS.endReadParams();
    bool __ret = registerClient(__p_client, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __net__sinofool__dbpool__idl__DBPoolServer_all[] =
{
    "getDBInstanceDict",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "registerClient",
    "reload"
};

}

::Ice::DispatchStatus
net::sinofool::dbpool::idl::DBPoolServer::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__net__sinofool__dbpool__idl__DBPoolServer_all, __net__sinofool__dbpool__idl__DBPoolServer_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __net__sinofool__dbpool__idl__DBPoolServer_all)
    {
        case 0:
        {
            return ___getDBInstanceDict(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___registerClient(in, current);
        }
        case 6:
        {
            return ___reload(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
net::sinofool::dbpool::idl::DBPoolServer::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
net::sinofool::dbpool::idl::DBPoolServer::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
net::sinofool::dbpool::idl::__patch(DBPoolServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::net::sinofool::dbpool::idl::DBPoolServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::net::sinofool::dbpool::idl::DBPoolServer::ice_staticId(), v);
    }
}
