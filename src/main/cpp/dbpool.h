// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.0
//
// <auto-generated>
//
// Generated from file `dbpool.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __dbpool_h__
#define __dbpool_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace net
{

namespace sinofool
{

namespace dbpool
{

namespace idl
{

class DBPoolClient;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::net::sinofool::dbpool::idl::DBPoolClient>&);
::IceProxy::Ice::Object* upCast(::IceProxy::net::sinofool::dbpool::idl::DBPoolClient*);

class DBPoolServer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::net::sinofool::dbpool::idl::DBPoolServer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::net::sinofool::dbpool::idl::DBPoolServer*);

}

}

}

}

}

namespace net
{

namespace sinofool
{

namespace dbpool
{

namespace idl
{

class DBPoolClient;
bool operator==(const DBPoolClient&, const DBPoolClient&);
bool operator<(const DBPoolClient&, const DBPoolClient&);
::Ice::Object* upCast(::net::sinofool::dbpool::idl::DBPoolClient*);
typedef ::IceInternal::Handle< ::net::sinofool::dbpool::idl::DBPoolClient> DBPoolClientPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::net::sinofool::dbpool::idl::DBPoolClient> DBPoolClientPrx;
void __patch(DBPoolClientPtr&, const ::Ice::ObjectPtr&);

class DBPoolServer;
bool operator==(const DBPoolServer&, const DBPoolServer&);
bool operator<(const DBPoolServer&, const DBPoolServer&);
::Ice::Object* upCast(::net::sinofool::dbpool::idl::DBPoolServer*);
typedef ::IceInternal::Handle< ::net::sinofool::dbpool::idl::DBPoolServer> DBPoolServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::net::sinofool::dbpool::idl::DBPoolServer> DBPoolServerPrx;
void __patch(DBPoolServerPtr&, const ::Ice::ObjectPtr&);

}

}

}

}

namespace net
{

namespace sinofool
{

namespace dbpool
{

namespace idl
{

struct DBServer
{
    ::std::string type;
    ::std::string host;
    ::std::string port;
    ::std::string db;
    ::std::string user;
    ::std::string pass;
    ::Ice::Int coreSize;
    ::Ice::Int maxSize;
    ::Ice::Int idleTimeSeconds;
    ::std::string expression;
    ::Ice::Int weight;
    ::std::string access;

    bool operator==(const DBServer& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(host != __rhs.host)
        {
            return false;
        }
        if(port != __rhs.port)
        {
            return false;
        }
        if(db != __rhs.db)
        {
            return false;
        }
        if(user != __rhs.user)
        {
            return false;
        }
        if(pass != __rhs.pass)
        {
            return false;
        }
        if(coreSize != __rhs.coreSize)
        {
            return false;
        }
        if(maxSize != __rhs.maxSize)
        {
            return false;
        }
        if(idleTimeSeconds != __rhs.idleTimeSeconds)
        {
            return false;
        }
        if(expression != __rhs.expression)
        {
            return false;
        }
        if(weight != __rhs.weight)
        {
            return false;
        }
        if(access != __rhs.access)
        {
            return false;
        }
        return true;
    }

    bool operator<(const DBServer& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(host < __rhs.host)
        {
            return true;
        }
        else if(__rhs.host < host)
        {
            return false;
        }
        if(port < __rhs.port)
        {
            return true;
        }
        else if(__rhs.port < port)
        {
            return false;
        }
        if(db < __rhs.db)
        {
            return true;
        }
        else if(__rhs.db < db)
        {
            return false;
        }
        if(user < __rhs.user)
        {
            return true;
        }
        else if(__rhs.user < user)
        {
            return false;
        }
        if(pass < __rhs.pass)
        {
            return true;
        }
        else if(__rhs.pass < pass)
        {
            return false;
        }
        if(coreSize < __rhs.coreSize)
        {
            return true;
        }
        else if(__rhs.coreSize < coreSize)
        {
            return false;
        }
        if(maxSize < __rhs.maxSize)
        {
            return true;
        }
        else if(__rhs.maxSize < maxSize)
        {
            return false;
        }
        if(idleTimeSeconds < __rhs.idleTimeSeconds)
        {
            return true;
        }
        else if(__rhs.idleTimeSeconds < idleTimeSeconds)
        {
            return false;
        }
        if(expression < __rhs.expression)
        {
            return true;
        }
        else if(__rhs.expression < expression)
        {
            return false;
        }
        if(weight < __rhs.weight)
        {
            return true;
        }
        else if(__rhs.weight < weight)
        {
            return false;
        }
        if(access < __rhs.access)
        {
            return true;
        }
        else if(__rhs.access < access)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const DBServer& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const DBServer& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const DBServer& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const DBServer& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::net::sinofool::dbpool::idl::DBServer> DBInstance;

typedef ::std::map< ::std::string, ::net::sinofool::dbpool::idl::DBInstance> DBInstanceDict;

}

}

}

}

namespace Ice
{
template<>
struct StreamableTraits< ::net::sinofool::dbpool::idl::DBServer>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::net::sinofool::dbpool::idl::DBServer, S>
{
    static void write(S* __os, const ::net::sinofool::dbpool::idl::DBServer& v)
    {
        __os->write(v.type);
        __os->write(v.host);
        __os->write(v.port);
        __os->write(v.db);
        __os->write(v.user);
        __os->write(v.pass);
        __os->write(v.coreSize);
        __os->write(v.maxSize);
        __os->write(v.idleTimeSeconds);
        __os->write(v.expression);
        __os->write(v.weight);
        __os->write(v.access);
    }
};

template<class S>
struct StreamReader< ::net::sinofool::dbpool::idl::DBServer, S>
{
    static void read(S* __is, ::net::sinofool::dbpool::idl::DBServer& v)
    {
        __is->read(v.type);
        __is->read(v.host);
        __is->read(v.port);
        __is->read(v.db);
        __is->read(v.user);
        __is->read(v.pass);
        __is->read(v.coreSize);
        __is->read(v.maxSize);
        __is->read(v.idleTimeSeconds);
        __is->read(v.expression);
        __is->read(v.weight);
        __is->read(v.access);
    }
};

}

namespace net
{

namespace sinofool
{

namespace dbpool
{

namespace idl
{

class Callback_DBPoolClient_pushDBInstanceDict_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPoolClient_pushDBInstanceDict_Base> Callback_DBPoolClient_pushDBInstanceDictPtr;

class Callback_DBPoolServer_getDBInstanceDict_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPoolServer_getDBInstanceDict_Base> Callback_DBPoolServer_getDBInstanceDictPtr;

class Callback_DBPoolServer_reload_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPoolServer_reload_Base> Callback_DBPoolServer_reloadPtr;

class Callback_DBPoolServer_registerClient_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBPoolServer_registerClient_Base> Callback_DBPoolServer_registerClientPtr;

}

}

}

}

namespace IceProxy
{

namespace net
{

namespace sinofool
{

namespace dbpool
{

namespace idl
{

class DBPoolClient : virtual public ::IceProxy::Ice::Object
{
public:

    bool pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict)
    {
        return pushDBInstanceDict(__p_dict, 0);
    }
    bool pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::Ice::Context& __ctx)
    {
        return pushDBInstanceDict(__p_dict, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_pushDBInstanceDict(__p_dict, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pushDBInstanceDict(__p_dict, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_pushDBInstanceDict(__p_dict, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pushDBInstanceDict(__p_dict, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict)
    {
        return begin_pushDBInstanceDict(__p_dict, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::Ice::Context& __ctx)
    {
        return begin_pushDBInstanceDict(__p_dict, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pushDBInstanceDict(__p_dict, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pushDBInstanceDict(__p_dict, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::net::sinofool::dbpool::idl::Callback_DBPoolClient_pushDBInstanceDictPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pushDBInstanceDict(__p_dict, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict& __p_dict, const ::Ice::Context& __ctx, const ::net::sinofool::dbpool::idl::Callback_DBPoolClient_pushDBInstanceDictPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pushDBInstanceDict(__p_dict, &__ctx, __del, __cookie);
    }

    bool end_pushDBInstanceDict(const ::Ice::AsyncResultPtr&);
    
private:

    bool pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_secure(bool __secure) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_twoway() const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_oneway() const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_batchOneway() const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_datagram() const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_batchDatagram() const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_compress(bool __compress) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolClient> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DBPoolClient*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DBPoolServer : virtual public ::IceProxy::Ice::Object
{
public:

    ::net::sinofool::dbpool::idl::DBInstanceDict getDBInstanceDict()
    {
        return getDBInstanceDict(0);
    }
    ::net::sinofool::dbpool::idl::DBInstanceDict getDBInstanceDict(const ::Ice::Context& __ctx)
    {
        return getDBInstanceDict(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDBInstanceDict(const ::IceInternal::Function<void (const ::net::sinofool::dbpool::idl::DBInstanceDict&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDBInstanceDict(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDBInstanceDict(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDBInstanceDict(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDBInstanceDict(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::net::sinofool::dbpool::idl::DBInstanceDict&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDBInstanceDict(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDBInstanceDict(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDBInstanceDict(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDBInstanceDict(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::net::sinofool::dbpool::idl::DBInstanceDict&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDBInstanceDict()
    {
        return begin_getDBInstanceDict(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDBInstanceDict(const ::Ice::Context& __ctx)
    {
        return begin_getDBInstanceDict(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDBInstanceDict(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDBInstanceDict(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDBInstanceDict(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDBInstanceDict(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDBInstanceDict(const ::net::sinofool::dbpool::idl::Callback_DBPoolServer_getDBInstanceDictPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDBInstanceDict(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDBInstanceDict(const ::Ice::Context& __ctx, const ::net::sinofool::dbpool::idl::Callback_DBPoolServer_getDBInstanceDictPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDBInstanceDict(&__ctx, __del, __cookie);
    }

    ::net::sinofool::dbpool::idl::DBInstanceDict end_getDBInstanceDict(const ::Ice::AsyncResultPtr&);
    
private:

    ::net::sinofool::dbpool::idl::DBInstanceDict getDBInstanceDict(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDBInstanceDict(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool reload()
    {
        return reload(0);
    }
    bool reload(const ::Ice::Context& __ctx)
    {
        return reload(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reload(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reload(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reload(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reload(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reload(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reload(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reload(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reload(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_reload(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_reload()
    {
        return begin_reload(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reload(const ::Ice::Context& __ctx)
    {
        return begin_reload(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reload(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reload(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reload(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reload(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reload(const ::net::sinofool::dbpool::idl::Callback_DBPoolServer_reloadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reload(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reload(const ::Ice::Context& __ctx, const ::net::sinofool::dbpool::idl::Callback_DBPoolServer_reloadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reload(&__ctx, __del, __cookie);
    }

    bool end_reload(const ::Ice::AsyncResultPtr&);
    
private:

    bool reload(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reload(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client)
    {
        return registerClient(__p_client, 0);
    }
    bool registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::Ice::Context& __ctx)
    {
        return registerClient(__p_client, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_registerClient(__p_client, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerClient(__p_client, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_registerClient(__p_client, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerClient(__p_client, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client)
    {
        return begin_registerClient(__p_client, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::Ice::Context& __ctx)
    {
        return begin_registerClient(__p_client, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerClient(__p_client, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerClient(__p_client, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::net::sinofool::dbpool::idl::Callback_DBPoolServer_registerClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerClient(__p_client, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx& __p_client, const ::Ice::Context& __ctx, const ::net::sinofool::dbpool::idl::Callback_DBPoolServer_registerClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerClient(__p_client, &__ctx, __del, __cookie);
    }

    bool end_registerClient(const ::Ice::AsyncResultPtr&);
    
private:

    bool registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_secure(bool __secure) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_twoway() const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_oneway() const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_batchOneway() const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_datagram() const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_batchDatagram() const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_compress(bool __compress) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DBPoolServer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DBPoolServer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

}

}

namespace net
{

namespace sinofool
{

namespace dbpool
{

namespace idl
{

class DBPoolClient : virtual public ::Ice::Object
{
public:

    typedef DBPoolClientPrx ProxyType;
    typedef DBPoolClientPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool pushDBInstanceDict(const ::net::sinofool::dbpool::idl::DBInstanceDict&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___pushDBInstanceDict(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const DBPoolClient& l, const DBPoolClient& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DBPoolClient& l, const DBPoolClient& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class DBPoolServer : virtual public ::Ice::Object
{
public:

    typedef DBPoolServerPrx ProxyType;
    typedef DBPoolServerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::net::sinofool::dbpool::idl::DBInstanceDict getDBInstanceDict(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDBInstanceDict(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool reload(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reload(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool registerClient(const ::net::sinofool::dbpool::idl::DBPoolClientPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registerClient(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const DBPoolServer& l, const DBPoolServer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DBPoolServer& l, const DBPoolServer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

}

}

namespace net
{

namespace sinofool
{

namespace dbpool
{

namespace idl
{

template<class T>
class CallbackNC_DBPoolClient_pushDBInstanceDict : public Callback_DBPoolClient_pushDBInstanceDict_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_DBPoolClient_pushDBInstanceDict(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::net::sinofool::dbpool::idl::DBPoolClientPrx __proxy = ::net::sinofool::dbpool::idl::DBPoolClientPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_pushDBInstanceDict(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_DBPoolClient_pushDBInstanceDictPtr
newCallback_DBPoolClient_pushDBInstanceDict(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPoolClient_pushDBInstanceDict<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPoolClient_pushDBInstanceDictPtr
newCallback_DBPoolClient_pushDBInstanceDict(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPoolClient_pushDBInstanceDict<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPoolClient_pushDBInstanceDict : public Callback_DBPoolClient_pushDBInstanceDict_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_DBPoolClient_pushDBInstanceDict(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::net::sinofool::dbpool::idl::DBPoolClientPrx __proxy = ::net::sinofool::dbpool::idl::DBPoolClientPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_pushDBInstanceDict(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_DBPoolClient_pushDBInstanceDictPtr
newCallback_DBPoolClient_pushDBInstanceDict(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPoolClient_pushDBInstanceDict<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPoolClient_pushDBInstanceDictPtr
newCallback_DBPoolClient_pushDBInstanceDict(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPoolClient_pushDBInstanceDict<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DBPoolServer_getDBInstanceDict : public Callback_DBPoolServer_getDBInstanceDict_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::net::sinofool::dbpool::idl::DBInstanceDict&);

    CallbackNC_DBPoolServer_getDBInstanceDict(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::net::sinofool::dbpool::idl::DBPoolServerPrx __proxy = ::net::sinofool::dbpool::idl::DBPoolServerPrx::uncheckedCast(__result->getProxy());
        ::net::sinofool::dbpool::idl::DBInstanceDict __ret;
        try
        {
            __ret = __proxy->end_getDBInstanceDict(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_DBPoolServer_getDBInstanceDictPtr
newCallback_DBPoolServer_getDBInstanceDict(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::net::sinofool::dbpool::idl::DBInstanceDict&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPoolServer_getDBInstanceDict<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPoolServer_getDBInstanceDictPtr
newCallback_DBPoolServer_getDBInstanceDict(T* instance, void (T::*cb)(const ::net::sinofool::dbpool::idl::DBInstanceDict&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPoolServer_getDBInstanceDict<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPoolServer_getDBInstanceDict : public Callback_DBPoolServer_getDBInstanceDict_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::net::sinofool::dbpool::idl::DBInstanceDict&, const CT&);

    Callback_DBPoolServer_getDBInstanceDict(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::net::sinofool::dbpool::idl::DBPoolServerPrx __proxy = ::net::sinofool::dbpool::idl::DBPoolServerPrx::uncheckedCast(__result->getProxy());
        ::net::sinofool::dbpool::idl::DBInstanceDict __ret;
        try
        {
            __ret = __proxy->end_getDBInstanceDict(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_DBPoolServer_getDBInstanceDictPtr
newCallback_DBPoolServer_getDBInstanceDict(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::net::sinofool::dbpool::idl::DBInstanceDict&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPoolServer_getDBInstanceDict<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPoolServer_getDBInstanceDictPtr
newCallback_DBPoolServer_getDBInstanceDict(T* instance, void (T::*cb)(const ::net::sinofool::dbpool::idl::DBInstanceDict&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPoolServer_getDBInstanceDict<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DBPoolServer_reload : public Callback_DBPoolServer_reload_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_DBPoolServer_reload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::net::sinofool::dbpool::idl::DBPoolServerPrx __proxy = ::net::sinofool::dbpool::idl::DBPoolServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_reload(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_DBPoolServer_reloadPtr
newCallback_DBPoolServer_reload(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPoolServer_reload<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPoolServer_reloadPtr
newCallback_DBPoolServer_reload(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPoolServer_reload<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPoolServer_reload : public Callback_DBPoolServer_reload_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_DBPoolServer_reload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::net::sinofool::dbpool::idl::DBPoolServerPrx __proxy = ::net::sinofool::dbpool::idl::DBPoolServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_reload(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_DBPoolServer_reloadPtr
newCallback_DBPoolServer_reload(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPoolServer_reload<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPoolServer_reloadPtr
newCallback_DBPoolServer_reload(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPoolServer_reload<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DBPoolServer_registerClient : public Callback_DBPoolServer_registerClient_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_DBPoolServer_registerClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::net::sinofool::dbpool::idl::DBPoolServerPrx __proxy = ::net::sinofool::dbpool::idl::DBPoolServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_registerClient(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_DBPoolServer_registerClientPtr
newCallback_DBPoolServer_registerClient(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPoolServer_registerClient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBPoolServer_registerClientPtr
newCallback_DBPoolServer_registerClient(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBPoolServer_registerClient<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBPoolServer_registerClient : public Callback_DBPoolServer_registerClient_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_DBPoolServer_registerClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::net::sinofool::dbpool::idl::DBPoolServerPrx __proxy = ::net::sinofool::dbpool::idl::DBPoolServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_registerClient(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_DBPoolServer_registerClientPtr
newCallback_DBPoolServer_registerClient(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPoolServer_registerClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBPoolServer_registerClientPtr
newCallback_DBPoolServer_registerClient(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBPoolServer_registerClient<T, CT>(instance, cb, excb, sentcb);
}

}

}

}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
